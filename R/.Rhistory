#ifdef _OPENMP
# include <omp.h>
#endif
// [[Rcpp::depends(RcppArmadillo)]]
// [[Rcpp::export]]
void omp_test()
{
#ifdef _OPENMP
Rprintf("OpenMP threads available: %d\\n", omp_get_max_threads());
#else
Rprintf("OpenMP not supported\\n");
#endif
}
')
## ====== function to add outcomes & counters
AddOutcomes <- function(D){
## === cost and probs (defaults)
D$Set(p=1)
D$Set(cost=0)
## === merge to create final tree ===
# MergeByName(D,asymp,'Asymptomatic child contact',leavesonly = TRUE)
# MergeByName(D,symp,'Symptomatic child contact')
MergeByName(D,tpt,'TPT outcomes')
# MergeByName(D,tpt,'no TPT outcomes')
MergeByName(D,tb,'TB outcomes')
MergeByName(D,notb,'no TB outcomes')
# MergeByName(D,notb,'Child HH contact not screened')
# MergeByName(D,notb,'No clinical re(evaluation) with/without  CXR')
## ===========  other counters
## check
D$Set(check=1)
D$Set(check=0,filterFun=function(x) length(x$children)>0)
## deaths
D$Set(deaths=0)
D$Set(deaths=1,filterFun=function(x) (x$name=='dies'))
## deaths for incident TB
D$Set(incdeaths=0)
D$`Child contact screened`$`Aymptomatic child contact`$`TPT outcomes`$Set(incdeaths=1,filterFun=function(x)x$name=='dies')
D$`Child contact screened`$`Symptomatic child contact`$`No active TB`$`TPT outcomes`$Set(incdeaths=1,filterFun=function(x)x$name=='dies')
## lives
D$Set(lives=0)
D$Set(lives=1,filterFun=function(x) (x$name=='survives'))
## inctb
D$Set(inctb=0)
D$Set(inctb=1,filterFun=function(x)x$name=='TB disease <1yr')
## coprevalent TB
# ## dx clinical
# D$Set(tbdxc=0)
# D$Set(tbdxc=1,filterFun=function(x) x$name=='TB diagnosed (clinical)')
#
# ## dx bac
# D$Set(tbdxb=0)
# D$Set(tbdxb=1,filterFun=function(x) x$name=='TB diagnosed (bacteriological)')
## coprevalent TB total
D$Set(prevtb=0)
D$Set(prevtb=1,filterFun=function(x)x$name %in% c('Active TB'))
## ATT in incidence
D$Set(atti=0)
D$`Child contact screened`$`Aymptomatic child contact`$`TPT outcomes`$Set(atti=1,filterFun=function(x)  x$name=='TB tx')
## ATT courses
D$Set(att=0)
D$Set(att=1,
filterFun=function(x)x$name=='TB tx')
## tpt eligible
D$Set(tpte=0)
D$Set(tpte=1,filterFun=function(x) x$name=='Eligible for TPT')
## TPT courses
D$Set(tpt=0)
D$Set(tpt=1,
filterFun=function(x)x$name=='TPT')
return(D)
}
# main tree structures
# contact <- txt2tree(here('indata/Child.hh.contact.txt'))
contact <- txt2tree(here('indata/Child.hh.contact (alernative).txt'))
## merge in extras, make model of care branches, write out
tempTree <- AddOutcomes(contact)
tempTree
## === SOC
SOC <- Node$new('Facility-based model')
SOC$AddChildNode(tempTree)
SOC$name <- 'Facility-based model'
## looking at tree 7
rm(list=ls())
library(here)
library(HEdtree)
library(data.tree)
library(DiagrammeR)
library(data.table)
library(glue)
# data.table::setDTthreads(4)
# getDTthreads()
# set_here('C:/Users/cm1nm/Dropbox/CONTACT')
## === outcomes subtree ===
tb <- txt2tree(here('indata/TB.outcomes.txt')) # tb dx
notb <- txt2tree(here('indata/noTB.outcomes.txt')) # no tb
tpt <- txt2tree(here('indata/TPT.outcomes.txt')) # tpt
## default prob/cost:
tb$Set(p=1)
notb$Set(p=1)
tpt$Set(p=1)
tb$Set(cost=0)
notb$Set(cost=0)
tpt$Set(cost=0)
## set probabilities
## NOTE these namings actually get overwritten by CSV read-ins below
## -- tb outcomes:
tb$`no TB tx`$p <- 'p.ptltfu'
tb$`no TB tx`$dies$p <- 'p.cfr.notx'
tb$`no TB tx`$survives$p <- '1-p.cfr.notx'
tb$`TB tx`$p <- '1-p.ptltfu'
tb$`TB tx`$dies$p <- 'p.cfr.tx'
tb$`TB tx`$survives$p <- '1-p.cfr.tx'
## -- tpt outcomes:
tpt$`Eligible for TPT`$TPT$`TB disease <1yr`$p <- 'p.tbdx.<1yr*tptRR'
tpt$`Eligible for TPT`$`no TPT`$`TB disease <1yr`$p <- 'p.tbdx.<1yr'
tpt$`Eligible for TPT`$TPT$`no TB disease <1yr`$p <- '1-p.tbdx.<1yr*tptRR'
tpt$`Eligible for TPT`$`no TPT`$`no TB disease <1yr`$p <- '1-p.tbdx.<1yr'
tpt$`Not eligible for TPT`$`TB disease <1yr`$p <- 'p.tbdx.<1yr'
tpt$`Not eligible for TPT`$`no TB disease <1yr`$p <- '1-p.tbdx.<1yr'
print(tpt,'p')
# no tb outcomes
notb$dies$p <- 'p.cfr.notb'
notb$survives$p <- '1-p.cfr.notb'
print(notb,'p')
## ====== function to add outcomes & counters
AddOutcomes <- function(D){
## === cost and probs (defaults)
D$Set(p=1)
D$Set(cost=0)
## === merge to create final tree ===
# MergeByName(D,asymp,'Asymptomatic child contact',leavesonly = TRUE)
# MergeByName(D,symp,'Symptomatic child contact')
MergeByName(D,tpt,'TPT outcomes')
# MergeByName(D,tpt,'no TPT outcomes')
MergeByName(D,tb,'TB outcomes')
MergeByName(D,notb,'no TB outcomes')
# MergeByName(D,notb,'Child HH contact not screened')
# MergeByName(D,notb,'No clinical re(evaluation) with/without  CXR')
## ===========  other counters
## check
D$Set(check=1)
D$Set(check=0,filterFun=function(x) length(x$children)>0)
## deaths
D$Set(deaths=0)
D$Set(deaths=1,filterFun=function(x) (x$name=='dies'))
## deaths for incident TB
D$Set(incdeaths=0)
D$`Child contact screened`$`Aymptomatic child contact`$`TPT outcomes`$Set(incdeaths=1,filterFun=function(x)x$name=='dies')
D$`Child contact screened`$`Symptomatic child contact`$`No active TB`$`TPT outcomes`$Set(incdeaths=1,filterFun=function(x)x$name=='dies')
## lives
D$Set(lives=0)
D$Set(lives=1,filterFun=function(x) (x$name=='survives'))
## inctb
D$Set(inctb=0)
D$Set(inctb=1,filterFun=function(x)x$name=='TB disease <1yr')
## coprevalent TB
# ## dx clinical
# D$Set(tbdxc=0)
# D$Set(tbdxc=1,filterFun=function(x) x$name=='TB diagnosed (clinical)')
#
# ## dx bac
# D$Set(tbdxb=0)
# D$Set(tbdxb=1,filterFun=function(x) x$name=='TB diagnosed (bacteriological)')
## coprevalent TB total
D$Set(prevtb=0)
D$Set(prevtb=1,filterFun=function(x)x$name %in% c('Active TB'))
## ATT in incidence
D$Set(atti=0)
D$`Child contact screened`$`Aymptomatic child contact`$`TPT outcomes`$Set(atti=1,filterFun=function(x)  x$name=='TB tx')
## ATT courses
D$Set(att=0)
D$Set(att=1,
filterFun=function(x)x$name=='TB tx')
## tpt eligible
D$Set(tpte=0)
D$Set(tpte=1,filterFun=function(x) x$name=='Eligible for TPT')
## TPT courses
D$Set(tpt=0)
D$Set(tpt=1,
filterFun=function(x)x$name=='TPT')
return(D)
}
# main tree structures
# contact <- txt2tree(here('indata/Child.hh.contact.txt'))
contact <- txt2tree(here('indata/Child.hh.contact (alernative).txt'))
# asymp <- txt2tree(here('indata/Asymptomatic.child.contact.txt'))
# symp <- txt2tree(here('indata/Symptomatic.child.contact.txt'))
## merge in extras, make model of care branches, write out
tempTree <- AddOutcomes(contact)
## === SOC
SOC <- Node$new('Facility-based model')
SOC$AddChildNode(tempTree)
SOC$name <- 'Facility-based model'
SOC
tree2file(SOC,filename = here('indata/CSV/SOCs.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
## === INT
INT <- Clone(SOC)
INT$name <- 'Community-based model'
tree2file(INT,filename = here('indata/CSV/INTs.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
## merge in extras, make model of care branches, write out
tempTree <- AddOutcomes(contact)
## === SOC
SOC <- Node$new('Facility-based model')
SOC$AddChildNode(tempTree)
SOC$name <- 'Facility-based model'
tree2file(SOC,filename = here('indata/CSV/SOCs.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
# ## create version with probs/costs
fn <- here('indata/CSV/SOCs1.csv')
if(file.exists(fn)){
## read
labz <- fread(fn)
SOC$Set(p=labz$p)
SOC$Set(cost=labz$cost)
## TPT/TB cascade counters
SOC$Set(TPT.screened=labz$TPT.screened)
SOC$Set(TPT.asymptomatic=labz$TPT.asymptomatic)
SOC$Set(TPT.eligible=labz$TPT.eligible)
SOC$Set(TPT.treated=labz$TPT.treated)
SOC$Set(TB.symptoms=labz$TB.symptoms)
SOC$Set(TB.evaluated=labz$TB.evaluated)
SOC$Set(TB.diagnosed=labz$TB.diagnosed)
SOC$Set(TB.treated=labz$TB.treated)
## save out
tree2file(SOC,filename = here('indata/CSV/SOCs2.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
}
## === INT
INT <- Clone(SOC)
INT$name <- 'Community-based model'
tree2file(INT,filename = here('indata/CSV/INTs.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
## save out
tree2file(SOC,filename = here('indata/CSV/SOCs1.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
if(file.exists(fn)){
## read
labz <- fread(fn)
SOC$Set(p=labz$p)
SOC$Set(cost=labz$cost)
## TPT/TB cascade counters
SOC$Set(TPT.screened=labz$TPT.screened)
SOC$Set(TPT.asymptomatic=labz$TPT.asymptomatic)
SOC$Set(TPT.eligible=labz$TPT.eligible)
SOC$Set(TPT.treated=labz$TPT.treated)
SOC$Set(TB.symptoms=labz$TB.symptoms)
SOC$Set(TB.evaluated=labz$TB.evaluated)
SOC$Set(TB.diagnosed=labz$TB.diagnosed)
SOC$Set(TB.treated=labz$TB.treated)
## save out
tree2file(SOC,filename = here('indata/CSV/SOCs1.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
}
## merge in extras, make model of care branches, write out
tempTree <- AddOutcomes(contact)
## === SOC
SOC <- Node$new('Facility-based model')
SOC$AddChildNode(tempTree)
SOC$name <- 'Facility-based model'
tree2file(SOC,filename = here('indata/CSV/SOCs.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
# ## create version with probs/costs
fn <- here('indata/CSV/SOCs1.csv')
if(file.exists(fn)){
## read
labz <- fread(fn)
SOC$Set(p=labz$p)
SOC$Set(cost=labz$cost)
## TPT/TB cascade counters
SOC$Set(TPT.screened=labz$TPT.screened)
SOC$Set(TPT.asymptomatic=labz$TPT.asymptomatic)
SOC$Set(TPT.eligible=labz$TPT.eligible)
SOC$Set(TPT.treated=labz$TPT.treated)
SOC$Set(TB.symptoms=labz$TB.symptoms)
SOC$Set(TB.evaluated=labz$TB.evaluated)
SOC$Set(TB.diagnosed=labz$TB.diagnosed)
SOC$Set(TB.treated=labz$TB.treated)
## save out
tree2file(SOC,filename = here('indata/CSV/SOCs2.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
}
## === INT
INT <- Clone(SOC)
INT$name <- 'Community-based model'
tree2file(INT,filename = here('indata/CSV/INTs.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
## create version with probs/costs
fn <- here('indata/CSV/INTs1.csv')
if(file.exists(fn)){
## read
labz <- fread(fn)
labz <- fread(fn)
INT$Set(p=labz$p)
INT$Set(cost=labz$cost)
## TPT/TB cascade counters
INT$Set(TPT.screened=labz$TPT.screened)
INT$Set(TPT.asymptomatic=labz$TPT.asymptomatic)
INT$Set(TPT.eligible=labz$TPT.eligible)
INT$Set(TPT.treated=labz$TPT.treated)
INT$Set(TB.symptoms=labz$TB.symptoms)
INT$Set(TB.evaluated=labz$TB.evaluated)
INT$Set(TB.diagnosed=labz$TB.diagnosed)
INT$Set(TB.treated=labz$TB.treated)
## save out
tree2file(INT,filename = here('indata/CSV/INTs2.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
}
## make functions
fnmz <- c('check','p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
makeTfuns(SOCs,fnmz)
SOC.F <- makeTfuns(SOC,fnmz)
INT.F <- makeTfuns(INT,fnmz)
## looking at tree 7
rm(list=ls())
library(here)
library(HEdtree)
library(data.tree)
library(DiagrammeR)
library(data.table)
library(glue)
# data.table::setDTthreads(4)
# getDTthreads()
# set_here('C:/Users/cm1nm/Dropbox/CONTACT')
## === outcomes subtree ===
tb <- txt2tree(here('indata/TB.outcomes.txt')) # tb dx
notb <- txt2tree(here('indata/noTB.outcomes.txt')) # no tb
tpt <- txt2tree(here('indata/TPT.outcomes.txt')) # tpt
## default prob/cost:
tb$Set(p=1)
notb$Set(p=1)
tpt$Set(p=1)
tb$Set(cost=0)
notb$Set(cost=0)
tpt$Set(cost=0)
## set probabilities
## NOTE these namings actually get overwritten by CSV read-ins below
## -- tb outcomes:
tb$`no TB tx`$p <- 'p.ptltfu'
tb$`no TB tx`$dies$p <- 'p.cfr.notx'
tb$`no TB tx`$survives$p <- '1-p.cfr.notx'
tb$`TB tx`$p <- '1-p.ptltfu'
tb$`TB tx`$dies$p <- 'p.cfr.tx'
tb$`TB tx`$survives$p <- '1-p.cfr.tx'
## -- tpt outcomes:
tpt$`Eligible for TPT`$TPT$`TB disease <1yr`$p <- 'p.tbdx.<1yr*tptRR'
tpt$`Eligible for TPT`$`no TPT`$`TB disease <1yr`$p <- 'p.tbdx.<1yr'
tpt$`Eligible for TPT`$TPT$`no TB disease <1yr`$p <- '1-p.tbdx.<1yr*tptRR'
tpt$`Eligible for TPT`$`no TPT`$`no TB disease <1yr`$p <- '1-p.tbdx.<1yr'
tpt$`Not eligible for TPT`$`TB disease <1yr`$p <- 'p.tbdx.<1yr'
tpt$`Not eligible for TPT`$`no TB disease <1yr`$p <- '1-p.tbdx.<1yr'
print(tpt,'p')
# no tb outcomes
notb$dies$p <- 'p.cfr.notb'
notb$survives$p <- '1-p.cfr.notb'
print(notb,'p')
## ====== function to add outcomes & counters
AddOutcomes <- function(D){
## === cost and probs (defaults)
D$Set(p=1)
D$Set(cost=0)
## === merge to create final tree ===
# MergeByName(D,asymp,'Asymptomatic child contact',leavesonly = TRUE)
# MergeByName(D,symp,'Symptomatic child contact')
MergeByName(D,tpt,'TPT outcomes')
# MergeByName(D,tpt,'no TPT outcomes')
MergeByName(D,tb,'TB outcomes')
MergeByName(D,notb,'no TB outcomes')
# MergeByName(D,notb,'Child HH contact not screened')
# MergeByName(D,notb,'No clinical re(evaluation) with/without  CXR')
## ===========  other counters
## check
D$Set(check=1)
D$Set(check=0,filterFun=function(x) length(x$children)>0)
## deaths
D$Set(deaths=0)
D$Set(deaths=1,filterFun=function(x) (x$name=='dies'))
## deaths for incident TB
D$Set(incdeaths=0)
D$`Child contact screened`$`Aymptomatic child contact`$`TPT outcomes`$Set(incdeaths=1,filterFun=function(x)x$name=='dies')
D$`Child contact screened`$`Symptomatic child contact`$`No active TB`$`TPT outcomes`$Set(incdeaths=1,filterFun=function(x)x$name=='dies')
## lives
D$Set(lives=0)
D$Set(lives=1,filterFun=function(x) (x$name=='survives'))
## inctb
D$Set(inctb=0)
D$Set(inctb=1,filterFun=function(x)x$name=='TB disease <1yr')
## coprevalent TB
# ## dx clinical
# D$Set(tbdxc=0)
# D$Set(tbdxc=1,filterFun=function(x) x$name=='TB diagnosed (clinical)')
#
# ## dx bac
# D$Set(tbdxb=0)
# D$Set(tbdxb=1,filterFun=function(x) x$name=='TB diagnosed (bacteriological)')
## coprevalent TB total
D$Set(prevtb=0)
D$Set(prevtb=1,filterFun=function(x)x$name %in% c('Active TB'))
## ATT in incidence
D$Set(atti=0)
D$`Child contact screened`$`Aymptomatic child contact`$`TPT outcomes`$Set(atti=1,filterFun=function(x)  x$name=='TB tx')
## ATT courses
D$Set(att=0)
D$Set(att=1,
filterFun=function(x)x$name=='TB tx')
## tpt eligible
D$Set(tpte=0)
D$Set(tpte=1,filterFun=function(x) x$name=='Eligible for TPT')
## TPT courses
D$Set(tpt=0)
D$Set(tpt=1,
filterFun=function(x)x$name=='TPT')
return(D)
}
# main tree structures
# contact <- txt2tree(here('indata/Child.hh.contact.txt'))
contact <- txt2tree(here('indata/Child.hh.contact (alernative).txt'))
# asymp <- txt2tree(here('indata/Asymptomatic.child.contact.txt'))
# symp <- txt2tree(here('indata/Symptomatic.child.contact.txt'))
## merge in extras, make model of care branches, write out
tempTree <- AddOutcomes(contact)
## === SOC
SOC <- Node$new('Facility-based model')
SOC$AddChildNode(tempTree)
SOC$name <- 'Facility-based model'
tree2file(SOC,filename = here('indata/CSV/SOCs.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
# ## create version with probs/costs
fn <- here('indata/CSV/SOCs1.csv')
if(file.exists(fn)){
## read
labz <- fread(fn)
SOC$Set(p=labz$p)
SOC$Set(cost=labz$cost)
## TPT/TB cascade counters
SOC$Set(TPT.screened=labz$TPT.screened)
SOC$Set(TPT.asymptomatic=labz$TPT.asymptomatic)
SOC$Set(TPT.eligible=labz$TPT.eligible)
SOC$Set(TPT.treated=labz$TPT.treated)
SOC$Set(TB.symptoms=labz$TB.symptoms)
SOC$Set(TB.evaluated=labz$TB.evaluated)
SOC$Set(TB.diagnosed=labz$TB.diagnosed)
SOC$Set(TB.treated=labz$TB.treated)
## save out
tree2file(SOC,filename = here('indata/CSV/SOCs2.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
}
## === INT
INT <- Clone(SOC)
INT$name <- 'Community-based model'
tree2file(INT,filename = here('indata/CSV/INTs.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
## create version with probs/costs
fn <- here('indata/CSV/INTs1.csv')
if(file.exists(fn)){
## read
labz <- fread(fn)
labz <- fread(fn)
INT$Set(p=labz$p)
INT$Set(cost=labz$cost)
## TPT/TB cascade counters
INT$Set(TPT.screened=labz$TPT.screened)
INT$Set(TPT.asymptomatic=labz$TPT.asymptomatic)
INT$Set(TPT.eligible=labz$TPT.eligible)
INT$Set(TPT.treated=labz$TPT.treated)
INT$Set(TB.symptoms=labz$TB.symptoms)
INT$Set(TB.evaluated=labz$TB.evaluated)
INT$Set(TB.diagnosed=labz$TB.diagnosed)
INT$Set(TB.treated=labz$TB.treated)
## save out
tree2file(INT,filename = here('indata/CSV/INTs2.csv'),
'p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths','check',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
}
## make functions
fnmz <- c('check','p','cost','tpte', 'tpt', 'inctb','prevtb', 'att','lives','incdeaths','deaths',
'TPT.screened','TPT.asymptomatic','TPT.eligible','TPT.treated',
'TB.symptoms','TB.evaluated','TB.diagnosed','TB.treated')
SOC.F <- makeTfuns(SOC,fnmz)
